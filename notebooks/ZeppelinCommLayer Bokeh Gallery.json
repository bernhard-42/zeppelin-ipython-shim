{"paragraphs":[{"text":"%pyspark\n\ndef versionCheck():\n    import sys\n    print(\"Python: \" + sys.version.replace(\"\\n\", \" - \"))\n    print(\"Spark:  \" + sc.version)\n\ndef display(html):\n    print(\"%angular\")\n    print(html)\n\ndef getNoteId():\n    return z.z.getInterpreterContext().getNoteId()\n\ndef getParagraphId():\n    return z.z.getInterpreterContext().getParagraphId()\n\n\nversionCheck()\n","user":"anonymous","dateUpdated":"2017-03-11T19:10:03+0100","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Python: 3.5.2 |Anaconda 4.3.0 (x86_64)| (default, Jul  2 2016, 17:52:12)  - [GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)]\nSpark:  2.1.0\n"}]},"apps":[],"jobName":"paragraph_1488559391575_532165574","id":"20170227-084909_1438863217","dateCreated":"2017-03-03T17:43:11+0100","dateStarted":"2017-03-11T19:10:03+0100","dateFinished":"2017-03-11T19:10:03+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:354"},{"title":"Import the Zeppelin Comm Layer, intialize it ...","text":"%pyspark\n\nfrom zeppelin_comm_layer import ZeppelinCommLayer, resetZeppelinCommLayer, LogLevel\n\n# resetZeppelinCommLayer(z.z)\nLogLevel().setLogLevel(\"DEBUG\")\n\nzcl = ZeppelinCommLayer(z.z)\n","user":"anonymous","dateUpdated":"2017-03-11T19:07:06+0100","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<div id=\"__Zeppelin_Session_2CB64Q4CN_Comm__\">{{__zeppelin_comm_2CB64Q4CN_status__}}</div>\n\n"}]},"apps":[],"jobName":"paragraph_1488559391575_532165574","id":"20170218-215455_1576137953","dateCreated":"2017-03-03T17:43:11+0100","dateStarted":"2017-03-11T19:07:06+0100","dateFinished":"2017-03-11T19:07:06+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:355"},{"title":"... and start it in the next Zeppelin paragraph(!) ","text":"%pyspark\n\nzcl.start()\n","user":"anonymous","dateUpdated":"2017-03-11T19:07:08+0100","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<div>You should now see<br><span style=\"margin:20px\"><i>ZeppelinSession started (do not delete this paragraph)</i></span></br>in the paragraph above</div>\n\n<script>\n    var sessionCommVar = \"__zeppelin_comm_2CB64Q4CN_msg__\";\n    var sessionCommDivId = \"__Zeppelin_Session_2CB64Q4CN_Comm__\"\n    var execution_id = \"5d305329-5810-42e6-8a38-c8b3cf23673d\";                                                 // Avoid double execution\n    if(window.__zeppelin_already_executed__ == null) {                       //\n        window.__zeppelin_already_executed__ = [];                           //\n    }                                                                        //\n    if(!window.__zeppelin_already_executed__.includes(execution_id)) {       // Avoid double execution\n\n        // Get the angular scope of the session div element\n\n        console.log(\"Get scope for div id\" + sessionCommDivId);\n        var $scope = angular.element(document.getElementById(sessionCommDivId)).scope();\n\n        // make scope easily accessible in Web Console\n\n        window.__zeppelin_comm_scope = $scope;\n\n        // Remove any remaining watcher from last session\n\n        if(typeof(window.__zeppelin_notebook_unwatchers__) !== \"undefined\") {\n            console.info(\"ZeppelinSession: Cancel watchers\");\n            var unwatchers = window.__zeppelin_notebook_unwatchers__\n            for(i in unwatchers) {\n                unwatchers[i]();\n            }\n        }\n        \n        // Array to note all active watchers (as with their respective unwatcher function)\n\n        window.__zeppelin_notebook_unwatchers__ = [];\n\n        // Main Handler\n\n        console.info(\"Install Angular watcher for session comm var \" + sessionCommVar);\n        var unwatch = $scope.$watch(sessionCommVar, function(newValue, oldValue, scope) {\n            if(typeof(newValue) !== \"undefined\") {\n                // console.info(newValue);\n                if (newValue.task === \"call\") {\n\n                    // Format: newValue = {\"id\": int, task\":\"call\", \"msg\":{\"function\":\"func_name\", \"object\":\"json_object\", \"delay\":ms}}\n                    \n                    var data = newValue.msg;\n                    console.log(\"Calling function \" + data.function + \" with delay: \" + data.delay)\n\n                    if (typeof($scope.__functions[data.function]) === \"function\") {\n                        setTimeout(function() {\n                            $scope.__functions[data.function]($scope, data.object);\n                        }, data.delay);\n                    } else {\n                        console.error(\"Unknown function: \" + data.function + \"()\")\n                    }\n                    \n                } else if (newValue.task === \"register\") {\n                    // Format: newValue = {\"id\": int, task\":\"register\", \"msg\":{\"function\":\"func_name\", \"funcBody\":\"function_as_string\"}}\n                    \n                    var data = newValue.msg;\n                    console.log(\"Registering function \" + data.function)\n                    \n                    var func = eval(data.funcBody);\n                    $scope.__functions[data.function] = func;\n                    \n                } else if (newValue.task === \"unregister\") {\n                    \n                    // Format: newValue = {\"id\": int, task\":\"unregister\", \"msg\":{\"function\":\"func_name\"}}\n                    \n                    var data = newValue.msg;\n                    console.log(\"Unregistering function \" + data.function)\n\n                    if (typeof($scope.__functions[data.function]) === \"function\") {\n                        delete $scope.__functions[data.function];\n                    }               \n                    \n                } else if (newValue.task === \"dump\") {\n                    \n                    // Format: newValue = {\"id\": int, task\":\"dump\", \"msg\":{}}\n                    \n                    console.log(\"sessionCommDivId: \", sessionCommDivId);\n                    console.log(\"$scope: \", $scope);\n\n                } else {\n\n                    // Jupyter.notebook.kernel.session.handleMsg(newValue);\n\n                    console.error(\"Unknown task: \" + newValue.task)\n                }\n            }\n        }, true)\n\n        // Initialize the object that will hold the registered functions\n        $scope.__functions = {};\n        \n        // remember unwatch function to clean up later\n        window.__zeppelin_notebook_unwatchers__.push(unwatch)\n\n        // mark init as executed\n        window.__zeppelin_already_executed__.push(execution_id);            // Avoid double execution\n    } else {                                                                //\n        console.info(\"Angular script already executed, skipped\");           //\n    }                                                                       // Avoid double execution\n</script>\n\n"}]},"apps":[],"jobName":"paragraph_1488559391575_532165574","id":"20170226-221402_1533614086","dateCreated":"2017-03-03T17:43:11+0100","dateStarted":"2017-03-11T19:07:08+0100","dateFinished":"2017-03-11T19:07:08+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:356"},{"title":"Adapt Bokeh global state management to Zeppelin","text":"%pyspark\n\nzcl.enableBokeh()\n","user":"anonymous","dateUpdated":"2017-03-11T19:07:10+0100","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488559391576_530241830","id":"20170302-203941_1344399843","dateCreated":"2017-03-03T17:43:11+0100","dateStarted":"2017-03-11T19:07:10+0100","dateFinished":"2017-03-11T19:07:10+0100","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:357","errorMessage":""},{"title":"Import Bokeh and redirect output to Zeppelin","text":"%pyspark\nfrom bokeh.io import push_notebook, show, output_notebook\nfrom bokeh.layouts import row\nfrom bokeh.resources import Resources\nfrom bokeh.plotting import figure\n\noutput_notebook()\n","user":"anonymous","dateUpdated":"2017-03-11T19:07:24+0100","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488559391576_530241830","id":"20170218-224440_1753132708","dateCreated":"2017-03-03T17:43:11+0100","dateStarted":"2017-03-11T19:07:24+0100","dateFinished":"2017-03-11T19:07:24+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:358"},{"text":"%pyspark\n#!zeppelin2md:images/bokeh-gallery-1.png\n\nfrom bokeh.charts import Bar, output_file, show\nfrom bokeh.charts.attributes import cat, color\nfrom bokeh.charts.operations import blend\nfrom bokeh.charts.utils import df_from_json\nfrom bokeh.sampledata.olympics2014 import data\n\n# utilize utility to make it easy to get json/dict data converted to a dataframe\ndf = df_from_json(data)\n\n# filter by countries with at least one medal and sort by total medals\ndf = df[df['total'] > 0]\ndf = df.sort(\"total\", ascending=False)\n\nbar = Bar(df,\n          values=blend('bronze', 'silver', 'gold', name='medals', labels_name='medal'),\n          label=cat(columns='abbr', sort=False),\n          stack=cat(columns='medal', sort=False),\n          color=color(columns='medal', palette=['SaddleBrown', 'Silver', 'Goldenrod'],\n                      sort=False),\n          legend='top_right',\n          title=\"Medals per Country, Sorted by Total Medals\",\n          tooltips=[('medal', '@medal'), ('country', '@abbr')])\n\n\nshow(bar)\n","user":"anonymous","dateUpdated":"2017-03-11T19:07:36+0100","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488559391576_530241830","id":"20170221-202002_1864027574","dateCreated":"2017-03-03T17:43:11+0100","dateStarted":"2017-03-11T19:07:36+0100","dateFinished":"2017-03-11T19:07:38+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:359"},{"text":"%pyspark\n#!zeppelin2md:images/bokeh-gallery-2.png\n\nfrom __future__ import print_function\n\nfrom bokeh.document import Document\nfrom bokeh.embed import file_html\nfrom bokeh.layouts import gridplot\nfrom bokeh.models.glyphs import Circle\nfrom bokeh.models import (BasicTicker, ColumnDataSource, Grid, LinearAxis,\n                         DataRange1d, PanTool, Plot, WheelZoomTool)\nfrom bokeh.resources import INLINE\nfrom bokeh.sampledata.iris import flowers\nfrom bokeh.util.browser import view\n\ncolormap = {'setosa': 'red', 'versicolor': 'green', 'virginica': 'blue'}\n\nflowers['color'] = flowers['species'].map(lambda x: colormap[x])\n\n\nsource = ColumnDataSource(\n    data=dict(\n        petal_length=flowers['petal_length'],\n        petal_width=flowers['petal_width'],\n        sepal_length=flowers['sepal_length'],\n        sepal_width=flowers['sepal_width'],\n        color=flowers['color']\n    )\n)\n\nxdr = DataRange1d(bounds=None)\nydr = DataRange1d(bounds=None)\n\ndef make_plot(xname, yname, xax=False, yax=False):\n    mbl = 40 if yax else 0\n    mbb = 40 if xax else 0\n    plot = Plot(\n        x_range=xdr, y_range=ydr, background_fill_color=\"#efe8e2\",\n        border_fill_color='white', plot_width=200 + mbl, plot_height=200 + mbb,\n        min_border_left=2+mbl, min_border_right=2, min_border_top=2, min_border_bottom=2+mbb)\n\n    circle = Circle(x=xname, y=yname, fill_color=\"color\", fill_alpha=0.2, size=4, line_color=\"color\")\n    r = plot.add_glyph(source, circle)\n\n    xdr.renderers.append(r)\n    ydr.renderers.append(r)\n\n    xticker = BasicTicker()\n    if xax:\n        xaxis = LinearAxis()\n        plot.add_layout(xaxis, 'below')\n        xticker = xaxis.ticker\n    plot.add_layout(Grid(dimension=0, ticker=xticker))\n\n    yticker = BasicTicker()\n    if yax:\n        yaxis = LinearAxis()\n        plot.add_layout(yaxis, 'left')\n        yticker = yaxis.ticker\n    plot.add_layout(Grid(dimension=1, ticker=yticker))\n\n    plot.add_tools(PanTool(), WheelZoomTool())\n\n    return plot\n\nxattrs = [\"petal_length\", \"petal_width\", \"sepal_width\", \"sepal_length\"]\nyattrs = list(reversed(xattrs))\nplots = []\n\nfor y in yattrs:\n    row = []\n    for x in xattrs:\n        xax = (y == yattrs[-1])\n        yax = (x == xattrs[0])\n        plot = make_plot(x, y, xax, yax)\n        row.append(plot)\n    plots.append(row)\n\ngrid = gridplot(plots)\n\nshow(grid)","user":"anonymous","dateUpdated":"2017-03-11T19:07:45+0100","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488559391577_529857081","id":"20170221-201808_1127949177","dateCreated":"2017-03-03T17:43:11+0100","dateStarted":"2017-03-11T19:07:45+0100","dateFinished":"2017-03-11T19:07:46+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:360"},{"text":"%pyspark\n#!zeppelin2md:images/bokeh-gallery-3.png\n\nimport numpy as np\nfrom scipy.integrate import odeint\n\nfrom bokeh.plotting import figure, show\n\nZBAK = z # Zeppelin bug\n\nsigma = 10\nrho = 28\nbeta = 8.0/3\ntheta = 3 * np.pi / 4\n\ndef lorenz(xyz, t):\n    x, y, z = xyz\n    x_dot = sigma * (y - x)\n    y_dot = x * rho - x * z - y\n    z_dot = x * y - beta* z\n    return [x_dot, y_dot, z_dot]\n\ninitial = (-10, -7, 35)\nt = np.arange(0, 100, 0.006)\n\nsolution = odeint(lorenz, initial, t)\n\nx = solution[:, 0]\ny = solution[:, 1]\nz = solution[:, 2]\nxprime = np.cos(theta) * x - np.sin(theta) * y\n\ncolors = [\"#C6DBEF\", \"#9ECAE1\", \"#6BAED6\", \"#4292C6\", \"#2171B5\", \"#08519C\", \"#08306B\",]\n\np = figure(title=\"lorenz example\")\n\np.multi_line(np.array_split(xprime, 7), np.array_split(z, 7),\n             line_color=colors, line_alpha=0.8, line_width=1.5)\n\n\nshow(p)  # open a browser\n\nz = ZBAK # Zeppelin bug\n","user":"anonymous","dateUpdated":"2017-03-11T19:08:01+0100","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488559391577_529857081","id":"20170221-200421_395267022","dateCreated":"2017-03-03T17:43:11+0100","dateStarted":"2017-03-11T19:08:01+0100","dateFinished":"2017-03-11T19:08:02+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:361"},{"text":"%pyspark\n#!zeppelin2md:images/bokeh-gallery-4.png\n\nfrom bokeh.models import HoverTool, ColumnDataSource\nfrom bokeh.plotting import figure, show, save\nfrom bokeh.sampledata.periodic_table import elements\n\nromans = [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n\nelements = elements.copy()\nelements[\"atomic mass\"] = elements[\"atomic mass\"].astype(str)\n\nelements[\"period\"] = [romans[x-1] for x in elements.period]\nelements = elements[elements.group != \"-\"]\n\ngroup_range = [str(x) for x in range(1, 19)]\n\ncolormap = {\n    \"alkali metal\"         : \"#a6cee3\",\n    \"alkaline earth metal\" : \"#1f78b4\",\n    \"halogen\"              : \"#fdbf6f\",\n    \"metal\"                : \"#b2df8a\",\n    \"metalloid\"            : \"#33a02c\",\n    \"noble gas\"            : \"#bbbb88\",\n    \"nonmetal\"             : \"#baa2a6\",\n    \"transition metal\"     : \"#e08e79\",\n}\n\nsource = ColumnDataSource(\n    data=dict(\n        group=[str(x) for x in elements[\"group\"]],\n        period=[str(y) for y in elements[\"period\"]],\n        symx=[str(x)+\":0.1\" for x in elements[\"group\"]],\n        numbery=[str(x)+\":0.8\" for x in elements[\"period\"]],\n        massy=[str(x)+\":0.15\" for x in elements[\"period\"]],\n        namey=[str(x)+\":0.3\" for x in elements[\"period\"]],\n        sym=elements[\"symbol\"],\n        name=elements[\"name\"],\n        cpk=elements[\"CPK\"],\n        atomic_number=elements[\"atomic number\"],\n        electronic=elements[\"electronic configuration\"],\n        mass=elements[\"atomic mass\"],\n        type=elements[\"metal\"],\n        type_color=[colormap[x] for x in elements[\"metal\"]],\n    )\n)\n\np = figure(title=\"Periodic Table\", tools=\"hover,save\",\n           x_range=group_range, y_range=list(reversed(romans)))\np.plot_width = 1200\np.toolbar_location = None\np.outline_line_color = None\n\np.rect(\"group\", \"period\", 0.9, 0.9, source=source,\n       fill_alpha=0.6, color=\"type_color\")\n\ntext_props = {\n    \"source\": source,\n    \"angle\": 0,\n    \"color\": \"black\",\n    \"text_align\": \"left\",\n    \"text_baseline\": \"middle\"\n}\n\np.text(x=\"symx\", y=\"period\", text=\"sym\",\n       text_font_style=\"bold\", text_font_size=\"15pt\", **text_props)\n\np.text(x=\"symx\", y=\"numbery\", text=\"atomic_number\",\n       text_font_size=\"9pt\", **text_props)\n\np.text(x=\"symx\", y=\"namey\", text=\"name\",\n       text_font_size=\"6pt\", **text_props)\n\np.text(x=\"symx\", y=\"massy\", text=\"mass\",\n       text_font_size=\"5pt\", **text_props)\n\np.grid.grid_line_color = None\n\np.select_one(HoverTool).tooltips = [\n    (\"name\", \"@name\"),\n    (\"atomic number\", \"@atomic_number\"),\n    (\"type\", \"@type\"),\n    (\"atomic mass\", \"@mass\"),\n    (\"CPK color\", \"$color[hex, swatch]:cpk\"),\n    (\"electronic configuration\", \"@electronic\"),\n]\n\n\nshow(p)  # Change to save(p) to save but not show the HTML file#\n","user":"anonymous","dateUpdated":"2017-03-11T19:08:07+0100","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488559391577_529857081","id":"20170221-201347_1016301668","dateCreated":"2017-03-03T17:43:11+0100","dateStarted":"2017-03-11T19:08:07+0100","dateFinished":"2017-03-11T19:08:07+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:362"},{"text":"%pyspark\n#!zeppelin2md:images/bokeh-gallery-5.png\n\nfrom collections import OrderedDict\nfrom math import log, sqrt\n\nimport numpy as np\nimport pandas as pd\nfrom six.moves import cStringIO as StringIO\n\nfrom bokeh.plotting import figure, show, output_file\n\nantibiotics = \"\"\"\nbacteria,                        penicillin, streptomycin, neomycin, gram\nMycobacterium tuberculosis,      800,        5,            2,        negative\nSalmonella schottmuelleri,       10,         0.8,          0.09,     negative\nProteus vulgaris,                3,          0.1,          0.1,      negative\nKlebsiella pneumoniae,           850,        1.2,          1,        negative\nBrucella abortus,                1,          2,            0.02,     negative\nPseudomonas aeruginosa,          850,        2,            0.4,      negative\nEscherichia coli,                100,        0.4,          0.1,      negative\nSalmonella (Eberthella) typhosa, 1,          0.4,          0.008,    negative\nAerobacter aerogenes,            870,        1,            1.6,      negative\nBrucella antracis,               0.001,      0.01,         0.007,    positive\nStreptococcus fecalis,           1,          1,            0.1,      positive\nStaphylococcus aureus,           0.03,       0.03,         0.001,    positive\nStaphylococcus albus,            0.007,      0.1,          0.001,    positive\nStreptococcus hemolyticus,       0.001,      14,           10,       positive\nStreptococcus viridans,          0.005,      10,           40,       positive\nDiplococcus pneumoniae,          0.005,      11,           10,       positive\n\"\"\"\n\ndrug_color = OrderedDict([\n    (\"Penicillin\",   \"#0d3362\"),\n    (\"Streptomycin\", \"#c64737\"),\n    (\"Neomycin\",     \"black\"  ),\n])\n\ngram_color = {\n    \"positive\" : \"#aeaeb8\",\n    \"negative\" : \"#e69584\",\n}\n\ndf = pd.read_csv(StringIO(antibiotics),\n                 skiprows=1,\n                 skipinitialspace=True,\n                 engine='python')\n\nwidth = 800\nheight = 800\ninner_radius = 90\nouter_radius = 300 - 10\n\nminr = sqrt(log(.001 * 1E4))\nmaxr = sqrt(log(1000 * 1E4))\na = (outer_radius - inner_radius) / (minr - maxr)\nb = inner_radius - a * maxr\n\ndef rad(mic):\n    return a * np.sqrt(np.log(mic * 1E4)) + b\n\nbig_angle = 2.0 * np.pi / (len(df) + 1)\nsmall_angle = big_angle / 7\n\np = figure(plot_width=width, plot_height=height, title=\"\",\n    x_axis_type=None, y_axis_type=None,\n    x_range=(-420, 420), y_range=(-420, 420),\n    min_border=0, outline_line_color=\"black\",\n    background_fill_color=\"#f0e1d2\", border_fill_color=\"#f0e1d2\",\n    toolbar_sticky=False)\n\np.xgrid.grid_line_color = None\np.ygrid.grid_line_color = None\n\n# annular wedges\nangles = np.pi/2 - big_angle/2 - df.index.to_series()*big_angle\ncolors = [gram_color[gram] for gram in df.gram]\np.annular_wedge(\n    0, 0, inner_radius, outer_radius, -big_angle+angles, angles, color=colors,\n)\n\n# small wedges\np.annular_wedge(0, 0, inner_radius, rad(df.penicillin),\n                -big_angle+angles+5*small_angle, -big_angle+angles+6*small_angle,\n                color=drug_color['Penicillin'])\np.annular_wedge(0, 0, inner_radius, rad(df.streptomycin),\n                -big_angle+angles+3*small_angle, -big_angle+angles+4*small_angle,\n                color=drug_color['Streptomycin'])\np.annular_wedge(0, 0, inner_radius, rad(df.neomycin),\n                -big_angle+angles+1*small_angle, -big_angle+angles+2*small_angle,\n                color=drug_color['Neomycin'])\n\n# circular axes and lables\nlabels = np.power(10.0, np.arange(-3, 4))\nradii = a * np.sqrt(np.log(labels * 1E4)) + b\np.circle(0, 0, radius=radii, fill_color=None, line_color=\"white\")\np.text(0, radii[:-1], [str(r) for r in labels[:-1]],\n       text_font_size=\"8pt\", text_align=\"center\", text_baseline=\"middle\")\n\n# radial axes\np.annular_wedge(0, 0, inner_radius-10, outer_radius+10,\n                -big_angle+angles, -big_angle+angles, color=\"black\")\n\n# bacteria labels\nxr = radii[0]*np.cos(np.array(-big_angle/2 + angles))\nyr = radii[0]*np.sin(np.array(-big_angle/2 + angles))\nlabel_angle=np.array(-big_angle/2+angles)\nlabel_angle[label_angle < -np.pi/2] += np.pi # easier to read labels on the left side\np.text(xr, yr, df.bacteria, angle=label_angle,\n       text_font_size=\"9pt\", text_align=\"center\", text_baseline=\"middle\")\n\n# OK, these hand drawn legends are pretty clunky, will be improved in future release\np.circle([-40, -40], [-370, -390], color=list(gram_color.values()), radius=5)\np.text([-30, -30], [-370, -390], text=[\"Gram-\" + gr for gr in gram_color.keys()],\n       text_font_size=\"7pt\", text_align=\"left\", text_baseline=\"middle\")\n\np.rect([-40, -40, -40], [18, 0, -18], width=30, height=13,\n       color=list(drug_color.values()))\np.text([-15, -15, -15], [18, 0, -18], text=list(drug_color),\n       text_font_size=\"9pt\", text_align=\"left\", text_baseline=\"middle\")\n\n\nshow(p)","user":"anonymous","dateUpdated":"2017-03-11T19:08:15+0100","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488559391577_529857081","id":"20170221-201443_71602227","dateCreated":"2017-03-03T17:43:11+0100","dateStarted":"2017-03-11T19:08:15+0100","dateFinished":"2017-03-11T19:08:15+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:363"},{"text":"%pyspark\n#!zeppelin2md:images/bokeh-gallery-6.png\n\nfrom bokeh.io import show\nfrom bokeh.models import (\n    ColumnDataSource,\n    HoverTool,\n    LogColorMapper\n)\nfrom bokeh.palettes import Viridis6 as palette\nfrom bokeh.plotting import figure\n\nfrom bokeh.sampledata.us_counties import data as counties\nfrom bokeh.sampledata.unemployment import data as unemployment\n\npalette.reverse()\n\ncounties = {\n    code: county for code, county in counties.items() if county[\"state\"] == \"tx\"\n}\n\ncounty_xs = [county[\"lons\"] for county in counties.values()]\ncounty_ys = [county[\"lats\"] for county in counties.values()]\n\ncounty_names = [county['name'] for county in counties.values()]\ncounty_rates = [unemployment[county_id] for county_id in counties]\ncolor_mapper = LogColorMapper(palette=palette)\n\nsource = ColumnDataSource(data=dict(\n    x=county_xs,\n    y=county_ys,\n    name=county_names,\n    rate=county_rates,\n))\n\nTOOLS = \"pan,wheel_zoom,box_zoom,reset,hover,save\"\n\np = figure(\n    title=\"Texas Unemployment, 2009\", tools=TOOLS,\n    x_axis_location=None, y_axis_location=None\n)\np.grid.grid_line_color = None\n\np.patches('x', 'y', source=source,\n          fill_color={'field': 'rate', 'transform': color_mapper},\n          fill_alpha=0.7, line_color=\"white\", line_width=0.5)\n\nhover = p.select_one(HoverTool)\nhover.point_policy = \"follow_mouse\"\nhover.tooltips = [\n    (\"Name\", \"@name\"),\n    (\"Unemployment rate)\", \"@rate%\"),\n    (\"(Long, Lat)\", \"($x, $y)\"),\n]\n\nshow(p)","user":"anonymous","dateUpdated":"2017-03-11T19:08:32+0100","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488559391577_529857081","id":"20170221-201647_822343580","dateCreated":"2017-03-03T17:43:11+0100","dateStarted":"2017-03-11T19:08:33+0100","dateFinished":"2017-03-11T19:08:35+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:364"},{"text":"%pyspark\n#!zeppelin2md:images/bokeh-gallery-7.png\n\nimport pandas as pd\nfrom bokeh.charts import output_file, Chord\nfrom bokeh.io import show\nfrom bokeh.sampledata.les_mis import data\n\nnodes = data['nodes']\nlinks = data['links']\n\nnodes_df = pd.DataFrame(nodes)\nlinks_df = pd.DataFrame(links)\n\nsource_data = links_df.merge(nodes_df, how='left', left_on='source', right_index=True)\nsource_data = source_data.merge(nodes_df, how='left', left_on='target', right_index=True)\nsource_data = source_data[source_data[\"value\"] > 5]\n\nchord_from_df = Chord(source_data, source=\"name_x\", target=\"name_y\", value=\"value\")\n\nshow(chord_from_df)","user":"anonymous","dateUpdated":"2017-03-11T19:08:41+0100","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488559391578_531011328","id":"20170221-201723_953579164","dateCreated":"2017-03-03T17:43:11+0100","dateStarted":"2017-03-11T19:08:41+0100","dateFinished":"2017-03-11T19:08:41+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:365"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2017-03-06T15:44:26+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488811466617_-2129919430","id":"20170306-154426_1526060514","dateCreated":"2017-03-06T15:44:26+0100","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:367"}],"name":"ZeppelinCommLayer Bokeh Gallery","id":"2CB64Q4CN","angularObjects":{"2CA5R39SP:shared_process":[],"2C9PBPHP2:shared_process":[{"name":"____zeppelin_comm_2CB64Q4CN_status__","object":"ZeppelinSession started (do not delete this paragraph)","noteId":"2CB64Q4CN"},{"name":"____zeppelin_comm_2CB64Q4CN_msg__","object":{"msg":{"div_id":"83dba839-0744-482f-a99c-8d586db7e2c7","html":"<script>\n(function(global) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof (window._bokeh_onload_callbacks) === \"undefined\" || force === true) {\n    window._bokeh_onload_callbacks = [];\n    window._bokeh_is_loading = undefined;\n  }\n\n\n  \n  if (typeof (window._bokeh_timeout) === \"undefined\" || force === true) {\n    window._bokeh_timeout = Date.now() + 5000;\n    window._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    if (window.Bokeh !== undefined) {\n      document.getElementById(\"c6944748-f5a3-4511-a006-9505dfc2873d\").textContent = \"BokehJS successfully loaded.\";\n    } else if (Date.now() < window._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n  function run_callbacks() {\n    window._bokeh_onload_callbacks.forEach(function(callback) { callback() });\n    delete window._bokeh_onload_callbacks\n    console.info(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(js_urls, callback) {\n    window._bokeh_onload_callbacks.push(callback);\n    if (window._bokeh_is_loading > 0) {\n      console.log(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.log(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    window._bokeh_is_loading = js_urls.length;\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var s = document.createElement('script');\n      s.src = url;\n      s.async = false;\n      s.onreadystatechange = s.onload = function() {\n        window._bokeh_is_loading--;\n        if (window._bokeh_is_loading === 0) {\n          console.log(\"Bokeh: all BokehJS libraries loaded\");\n          run_callbacks()\n        }\n      };\n      s.onerror = function() {\n        console.warn(\"failed to load library \" + url);\n      };\n      console.log(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.getElementsByTagName(\"head\")[0].appendChild(s);\n    }\n  };var element = document.getElementById(\"c6944748-f5a3-4511-a006-9505dfc2873d\");\n  if (element == null) {\n    console.log(\"Bokeh: ERROR: autoload.js configured with elementid 'c6944748-f5a3-4511-a006-9505dfc2873d' but no matching script tag was found. \")\n    return false;\n  }\n\n  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.4.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.4.min.js\"];\n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    \n    function(Bokeh) {\n      \n      document.getElementById(\"c6944748-f5a3-4511-a006-9505dfc2873d\").textContent = \"BokehJS is loading...\";\n    },\n    function(Bokeh) {\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-0.12.4.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.4.min.css\");\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.4.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.4.min.css\");\n    }\n  ];\n\n  function run_inline_js() {\n    \n    if ((window.Bokeh !== undefined) || (force === true)) {\n      for (var i = 0; i < inline_js.length; i++) {\n        inline_js[i](window.Bokeh);\n      }if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < window._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!window._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      window._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"c6944748-f5a3-4511-a006-9505dfc2873d\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (window._bokeh_is_loading === 0) {\n    console.log(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(js_urls, function() {\n      console.log(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(this));</script>"},"task":"publish","id":2},"noteId":"2CB64Q4CN"}],"2C9T35AYY:shared_process":[],"2CDENW1UJ:shared_process":[],"2CA3CRS2J:shared_process":[],"2CAVHABDX:shared_process":[],"2CARY5ZYS:shared_process":[],"2CB9RSR89:shared_process":[],"2CASZNT3R:shared_process":[],"2CA4UU9ZH:shared_process":[],"2CCYSWEBF:shared_process":[],"2CA17HE2U:shared_process":[],"2CCHGTGDY:shared_process":[],"2CACZ48YM:shared_process":[],"2C9R2RW8Y:shared_process":[],"2CCZZ351R:shared_process":[],"2C9RAHG2K:shared_process":[],"2CCWBCHAT:shared_process":[],"2C9MFUCEM:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}